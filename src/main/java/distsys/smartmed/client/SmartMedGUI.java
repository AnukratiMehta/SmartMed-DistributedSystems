/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.smartmed.client;

/**
 *
 * @author anukratimehta
 */

import com.healthcare.grpc.consultation.*;
import com.healthcare.grpc.diagnostic.*;
import com.healthcare.grpc.monitoring.*;
import com.healthcare.grpc.patient.*;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class SmartMedGUI extends javax.swing.JFrame {
    private ManagedChannel channel;

    public SmartMedGUI() {
        initComponents();
        initializeGRPCChannel();
    }

    private void initializeGRPCChannel() {
        this.channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext()
                .build();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientBtn = new javax.swing.JButton();
        monitoringBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patientBtn.setText("Patient Records");
        patientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBtnActionPerformed(evt);
            }
        });

        monitoringBtn.setText("Monitor Vitals");
        monitoringBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monitoringBtnActionPerformed(evt);
            }
        });

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patientBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(monitoringBtn)
                .addGap(20, 20, 20))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientBtn)
                    .addComponent(monitoringBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void log(String message) {
        resultArea.append(message + "\n");
        resultArea.setCaretPosition(resultArea.getDocument().getLength());
    }
     
    private void patientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBtnActionPerformed
        // TODO add your handling code here:
        new Thread(() -> {
            try {
                log("\n=== Fetching Patient Record ===");
                PatientServiceGrpc.PatientServiceBlockingStub stub = 
                    PatientServiceGrpc.newBlockingStub(channel);

                PatientResponse response = stub.getPatientRecord(
                    PatientRequest.newBuilder().setPatientId("patient-123").build());

                log("Patient ID: " + response.getPatientId());
                log("Name: " + response.getName());
                log("Current Medication: " + response.getCurrentMedication());
                log("Medical History: " + response.getMedicalHistoryList());
            } catch (Exception ex) {
                log("Error fetching patient record: " + ex.getMessage());
            }
        }).start();
    }//GEN-LAST:event_patientBtnActionPerformed

    private void monitoringBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monitoringBtnActionPerformed
        // TODO add your handling code here:
        new Thread(() -> {
            try {
                log("\n=== Starting Vitals Monitoring ===");
                CountDownLatch latch = new CountDownLatch(1);

                MonitoringServiceGrpc.MonitoringServiceStub stub = 
                    MonitoringServiceGrpc.newStub(channel);

                stub.streamVitals(
                    VitalsRequest.newBuilder()
                        .setPatientId("patient-123")
                        .setDurationSeconds(10) // Monitor for 10 seconds
                        .build(),
                    new StreamObserver<VitalsUpdate>() {
                        @Override
                        public void onNext(VitalsUpdate update) {
                            log(String.format("Heart Rate: %d | Oxygen: %.1f%% | Time: %tT",
                                update.getHeartRate(),
                                update.getOxygenLevel(),
                                update.getTimestamp()));
                        }

                        @Override
                        public void onError(Throwable t) {
                            log("Monitoring error: " + t.getMessage());
                            latch.countDown();
                        }

                        @Override
                        public void onCompleted() {
                            log("Monitoring session ended");
                            latch.countDown();
                        }
                    });

                latch.await();
            } catch (Exception ex) {
                log("Error in vitals monitoring: " + ex.getMessage());
            }
        }).start();
    }//GEN-LAST:event_monitoringBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(SmartMedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartMedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartMedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartMedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartMedGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartMedGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton monitoringBtn;
    private javax.swing.JButton patientBtn;
    private javax.swing.JTextArea resultArea;
    // End of variables declaration//GEN-END:variables
}
